// schema.prisma

datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url      = env("DATABASE_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  //directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  //engineType = "binary"  
}

model Post {
  id String @id @default(cuid())

  health   Health @relation("PostHealth", fields: [healthId], references: [id], onDelete: Cascade)
  healthId String @unique

  basics   Basics @relation("PostBasics", fields: [basicsId], references: [id], onDelete: Cascade)
  basicsId String @unique

  skills   Skills @relation("PostSkill", fields: [skillsId], references: [id], onDelete: Cascade)
  skillsId String @unique

  attributes   Attributes @relation("PostAttributes", fields: [attributesId], references: [id], onDelete: Cascade)
  attributesId String     @unique

  feats   Feats  @relation("PostFeats", fields: [featsId], references: [id], onDelete: Cascade)
  featsId String @unique

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
}

model Feats {
  id         String @id @default(cuid())
  featsLabel String

  featInstance FeatInstance[] @relation("FeatsFeatInstance")

  post Post? @relation("PostFeats")
}

model FeatInstance {
  id                String @id @default(cuid())
  featName          String
  featChargeLabel   String
  featChargeCurrent String
  featChargeMax     String
  featText          String

  feats   Feats? @relation("FeatsFeatInstance", fields: [featsId], references: [id], onDelete: Cascade)
  featsId String
}

model Attributes {
  id String @id @default(cuid())

  attributeInstance AttributeInstance[] @relation("AttributesAttributeInstance")

  post Post? @relation("PostAttributes")
}

model AttributeInstance {
  id             String @id @default(cuid())
  attributeName  String
  attributeValue String
  attributeMod   String
  attributeSave  String
  attributeColor String

  attributes   Attributes? @relation("AttributesAttributeInstance", fields: [attributesId], references: [id], onDelete: Cascade)
  attributesId String
}

model Skills {
  id          String @id @default(cuid())
  skillsLabel String
  profsLabel  String

  skillInstance SkillInstance[] @relation("SkillsSkill")

  post Post? @relation("PostSkill")
}

model SkillInstance {
  id         String @id @default(cuid())
  skillName  String
  skillValue String
  skillProf  String

  skills   Skills? @relation("SkillsSkill", fields: [skillsId], references: [id], onDelete: Cascade)
  skillsId String
}

model Health {
  id            String @id @default(cuid())
  hpCurrent     String
  hpMax         String
  hpTemp        String
  ac            String
  stressCurrent String
  stressMax     String
  hpLabel       String
  hpTempLabel   String
  acLabel       String
  stressLabel   String

  post Post? @relation("PostHealth")
}

model Basics {
  id         String @id @default(cuid())
  imageUrl   String
  name       String
  desc       String
  level      String
  xp         String
  levelLabel String
  xpLabel    String

  post Post? @relation("PostBasics")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
}
