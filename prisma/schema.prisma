// schema.prisma

datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url      = env("DATABASE_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  //directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  //engineType = "binary"  
}

model Post {
  id String @id @default(cuid())

  health   Health @relation(fields: [healthId], references: [id])
  healthId String @unique

  basics   Basics @relation(fields: [basicsId], references: [id])
  basicsId String @unique

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
}

model Health {
  id            String @id @default(cuid())
  hpCurrent     String
  hpMax         String
  hpTemp        String
  ac            String
  stressCurrent String
  stressMax     String
  hpLabel       String
  hpTempLabel   String
  acLabel       String
  stressLabel   String

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  post Post?
}

model Basics {
  id         String @id @default(cuid())
  imageUrl   String
  name       String
  desc       String
  level      String
  xp         String
  levelLabel String
  xpLabel    String

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  post Post?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  Health        Health[]
  Basics        Basics[]
}
